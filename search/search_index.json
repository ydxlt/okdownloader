{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"OkDownloader","text":"<p>A downloader base on OkHttp for Java and Android.</p> <ul> <li>Easy to use: API like OkHttp</li> <li>Many features: support many scenes, such as synchronous/asynchronous download, you can use it easy in coroutines</li> <li>Modern: OkDownloader is Kotlin-first and base on OkHttp</li> <li>Easy to expand: support SPI and dynomic Interceptor to expand</li> </ul>"},{"location":"#features","title":"Features","text":"Feature Supported Synchronous download \u2705 Asynchronous download \u2705 Breakpoint download \u2705 Multi-threaded\u00a0download \u2705 Priority \u2705 Retry \u2705 Event subscribe \u2705 Subscrible API \u2705 Multi-downloader \u2705"},{"location":"#download","title":"Download","text":"<p>OkDownloader is available on <code>mavenCentral()</code>.</p> <pre><code>implementation(\"com.billbook.lib:downloader:1.0.0\")\n</code></pre>"},{"location":"#quick-start","title":"Quick Start","text":"<p>Build a downloader just like build OkHttpClient</p> <pre><code>val downloader = Downloader.Builder().build()\n</code></pre> <p>Start download</p> <pre><code>val request = Download.Request.Builder()\n.url(url)\n.into(path) // or into(file)\n.build()\nval call = downloader.newCall(request)\nval response = call.execute() // synchronous download\n// use response here\n</code></pre> <p>or</p> <pre><code>call.enqueue() // Asynchronous download\n</code></pre> <p>with callback</p> <pre><code>call.enqueue(object : Download.Callback {\n// ...\noverride fun onSuccess(call: Download.Call, response: Download.Response) {\n// do your job\n}\noverride fun onFailure(call: Download.Call, response: Download.Response) {\n// do your job\n}\n})\n</code></pre> <p>Cancel download</p> <pre><code>call.cancel() // or call.cancelSafely()\n</code></pre>"},{"location":"#how-to-expand","title":"How to expand","text":"<p>Dynamically add interceptors</p> <pre><code>val downloader = Downloader.Builder()\n.addInterceptor(CustomInterceptor())\n.build()\n</code></pre> <p>or</p> <p>Declare your interceptors using SPI,In META-INF/services/com.billbook.lib.Interceptor</p> <pre><code>com.example.CustomInterceptor1\ncom.example.CustomInterceptor2\ncom.example.CustomInterceptor3\n</code></pre>"},{"location":"#r8proguard","title":"R8/Proguard","text":"<p>OkDownloader is fully compatible with R8 out of the box and doesn't require adding any extra rules. If you use Proguard, you may need to add rules for OkHttp and Okio.</p>"},{"location":"#license","title":"License","text":"<pre><code>Copyright 2023 Billbook, Inc.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n</code></pre>"},{"location":"getting_started/","title":"Getting Started","text":""},{"location":"getting_started/#asynchronous-download","title":"Asynchronous Download","text":"<p><code>Asynchronous Download</code>\u610f\u5473\u7740\u5728\u5f02\u6b65\u7ebf\u7a0b\u4e2d\u6267\u884c</p> <pre><code>val request = Download.Request.Builder()\n.url(url)\n.into(file)\n.build()\nval call = downloader.newCall(request)\ncall.enqueue()\n</code></pre> <p>\u6dfb\u52a0\u56de\u8c03\u76d1\u542c</p> <pre><code>call.enqueue(object : Download.Callback {\n// ...\noverride fun onSuccess(call: Download.Call, response: Download.Response) {\n// do your job\n}\noverride fun onFailure(call: Download.Call, response: Download.Response) {\n// do your job\n}\n})\n</code></pre>"},{"location":"getting_started/#synchronous-download","title":"Synchronous Download","text":"<p><code>Synchronous Download</code>\u610f\u5473\u7740\u5728\u5f53\u524d\u7ebf\u7a0b\u4e2d\u6267\u884c\uff0c\u5373\u963b\u585e\u8c03\u7528\u7ebf\u7a0b\u6267\u884c</p> <pre><code>val request = Download.Request.Builder()\n.url(url)\n.into(file)\n.build()\nval call = downloader.newCall(request)\ncall.execute()\n</code></pre> <p>\u6dfb\u52a0\u56de\u8c03\u76d1\u542c</p> <pre><code>call.execute(object : Download.Callback {\n// ...\noverride fun onSuccess(call: Download.Call, response: Download.Response) {\n// do your job\n}\noverride fun onFailure(call: Download.Call, response: Download.Response) {\n// do your job\n}\n})\n</code></pre>"}]}